module HigherLowerUltimate;

type <fstar> "int" from "" as int;

global protocol HigherLowerUltimate(role A, role B, role C) {
  start(n0:int) from A to B;  @'0<=n0 && n0<100'
  limit(t0:int) from A to B;  @'0<t0'
  do Aux(A, B, C);     @'B[n0, t0] C[0,0]'
}

aux global protocol Aux(role A, role B, role C)
            @'B[n: int = 0, t: int = 1] C[h: int = 0, o: int = 0] (0<=n && n<100) && 0<t && (h=1 || h=0 || h=-1)' {
  choice at C {
    guess1(x:int) from C to B;  @'0<=x && x<100 && h=0'
    choice at B {
      higher() from B to C;    @'n>x && t>1'
      higher() from B to A;
      do Aux(A, B, C);   @'B[n, t-1] C[1,x]'
    } or {
      win() from B to C;       @'n=x'
      lose() from B to A;
    } or {
      lower() from B to C;     @'n<x && t>1'
      lower() from B to A;
      do Aux(A, B, C);   @'B[n, t-1] C[-1,x]'
    } or {
      lose() from B to C;      @'((n<x || n>x) && t=1)'
      win() from B to A;
    }
  } or {
    guess2(x:int) from C to B;  @'0<=x && x<100 && h=1 && x>o'
    choice at B {
      higher() from B to C;    @'n>x && t>1'
      higher() from B to A;
      do Aux(A, B, C);   @'B[n, t-1] C[1,x]'
    } or {
      win() from B to C;       @'n=x'
      lose() from B to A;
    } or {
      lower() from B to C;     @'n<x && t>1'
      lower() from B to A;
      do Aux(A, B, C);   @'B[n, t-1] C[-1,x]'
    } or {
      lose() from B to C;      @'((n<x || n>x) && t=1)'
      win() from B to A;
    }

  } or {
    guess3(x:int) from C to B;  @'0<=x && x<100 && h=-1 && x<o'
    choice at B {
      higher() from B to C;    @'n>x && t>1'
      higher() from B to A;
      do Aux(A, B, C);   @'B[n, t-1] C[1,x]'
    } or {
      win() from B to C;       @'n=x'
      lose() from B to A;
    } or {
      lower() from B to C;     @'n<x && t>1'
      lower() from B to A;
      do Aux(A, B, C);   @'B[n, t-1] C[-1,x]'
    } or {
      lose() from B to C;      @'((n<x || n>x) && t=1)'
      win() from B to A;
    }
  }
}
