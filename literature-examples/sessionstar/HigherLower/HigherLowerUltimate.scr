// TODO: Wrangle this later to make it fit the syntax 


module HigherLowerUltimate;

type <fstar> "int" from "" as int;

global protocol HigherLower(role A, role B, role C) {
  start(n0:int) from A to B;  
  limit(t0:int) from A to B;  @'0<t0'
  guess(x:int) from C to B;  
  do Aux(A, B, C);     @'B[n0, t0]'
}

aux global protocol Aux(role A, role B, role C)
            @'B[n: int = 0, t: int = 1, prev: int = 0]' {
  guess(x:int) from C to B;  @'0<=x && x<100'
  choice at B {
    higher() from B to C;    @'n>x && t>1'
    do Aux(A, B, C);   @'B[n, t-1, 1]'
  } or {
    win() from B to C;       @'n=x'
    lose() from B to A;
  } or {
    lower() from B to C;     @'n<x && t>1'
    do Aux(A, B, C);   @'B[n, t-1]'
  } or {
    lose() from B to C;      @'((n<x || n>x) && t=1)'
    win() from B to A;
  }
}

