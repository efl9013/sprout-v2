/* 
Send Validity violating finite protocol: 
States: {0,1,2,3,4}
Registers: {}
Initial register values: N/A

   (0) p->q:v{v=1} (1)
   (0) p->q:v{v=2} (3)
   (1) r->s:v{v=1} (2)
   (3) r->s:v{v=2} (4)

*/
 
/* Symbolic Send Coherence for participant r for this protocol enumerates the following pairs of states and transitions: 
- (1) r->s:v{v=1} (2), (0-4)
- (3) r->s:v{v=2} (4), (0-4)
*/ 

/* The following is the negation of SSC, because apparently the tool cannot handle implies false */ 

/* Expected result: valid */ 
/* Result: valid! */ 

exists (s1:int) (s1':int) (x1:int) (s2:int). 
(((s1=1 /\ s1'=2 /\ 0<=s2 /\ s2<=4)
\/ (s1=3 /\ s1'=4 /\ 0<=s2 /\ s2<=4))
/\
(unreach_rs s2 x1))
s.t. 

/* Defining unreach_rs */
unreach_rs (s:int) (x:int): bool =nu
/* Outermost case split on s */ 
false \/ (
s = 0 /\ (forall (v:int). (v = 1) => unreach_rs 1 x) 
/\ (forall (v:int). (v = 2) => unreach_rs 3 x) 
) \/ (
s = 1 /\ ((x = 1) => false) 
/\ (forall (v:int). (v = 1) => unreach_rs 2 x) 
) \/ (
s = 2 ) \/ (
s = 3 /\ ((x = 2) => false) 
/\ (forall (v:int). (v = 2) => unreach_rs 4 x) 
) \/ (
s = 4 );

/* First conjuncts: r->s transition, but predicate disabled */ 
/*    (1) r->s:v{v=1} (2)
      (3) r->s:v{v=2} (4) */ 
/* Second conjuncts: epsilon transition */ 
/*    (0) p->q:v{v=1} (1)
      (0) p->q:v{v=2} (3) */ 










