type token =
    WILDCARD
  | VERT
  | ToReal
  | ToInt
  | TYPEOF
  | TRUE
  | SUBTYPE
  | SUB
  | SQRT
  | SEMPTY
  | SEMICOLON
  | RTRI
  | RPAREN
  | RECOGNIZER of string
  | RBRA
  | QUESTION
  | PROJ
  | PLUSPLUS
  | OR
  | NOTEQUAL
  | NOT
  | MOD
  | MINIMIZE
  | MAXIMIZE
  | LT
  | LPAREN
  | LEQ
  | LBRA
  | INT of int
  | INFEFFECTOF
  | IN
  | IMP
  | IFF
  | IDENT_T of string
  | IDENT of string
  | GT
  | GEQ
  | FSUB
  | FORALL
  | FMUL
  | FLOAT of float
  | FINEFFECTOF
  | FDIV
  | FALSE
  | FADD
  | EXISTS
  | EXC
  | EVENT
  | EQUAL
  | EPSILON
  | EOF
  | DOT
  | DIV
  | CONST of string
  | COMMA
  | COLON
  | COLCOL
  | BOOL of bool
  | AST
  | ARROW
  | APPLY
  | AND
  | AMP
  | ADD
  | ACCESSOR of (string * int)
  | ABS
val print : 'a -> unit
val menhir_begin_marker : int
val xv_val_tys_comma : LogicOld.sort_env_map -> Rtype.t list
val xv_val_tys_ast : LogicOld.sort_env_map -> Rtype.t list
val xv_val_ty_env : Rtype.env
val xv_val_ty_bind : Ident.tvar * Rtype.t
val xv_val_ty : LogicOld.sort_env_map -> Rtype.t
val xv_terms : LogicOld.sort_env_map -> LogicOld.Term.t list
val xv_term : LogicOld.sort_env_map -> LogicOld.Term.t
val xv_space_constrs : (Ident.tvar * SolSpace.space_flag * int) list
val xv_space_constr : Ident.tvar * SolSpace.space_flag * int
val xv_prop : LogicOld.sort_env_map -> LogicOld.Formula.t
val xv_opt_problems :
  (Ident.tvar * (Ident.tvar * Assertion.direction) list *
   (Ident.tvar * SolSpace.space_flag * int) list)
  list
val xv_opt_pair :
  Ident.tvar * (Ident.tvar * Assertion.direction) list *
  (Ident.tvar * SolSpace.space_flag * int) list
val xv_opsig_ty : LogicOld.sort_env_map -> Rtype.o
val xv_op_tys :
  LogicOld.sort_env_map -> (string, Rtype.t) Common.Util.ALMap.t
val xv_formula : LogicOld.Formula.t
val xv_eff : bool * string Grammar.RegWordExp.t
val xv_directs : (Ident.tvar * Assertion.direction) list
val xv_direct : Ident.tvar * Assertion.direction
val xv_cont_eff_ty : LogicOld.sort_env_map -> LogicOld.Sort.t -> Rtype.s
val xv_constraints : LogicOld.Formula.t list
val xv_comp_ty : LogicOld.sort_env_map -> Rtype.c
val xv_binds : LogicOld.sort_env_list
val xv_bind : LogicOld.sort_bind
val xv_atom_or_term : LogicOld.sort_env_map -> LogicOld.Term.t
val xv_atom : LogicOld.sort_env_map -> LogicOld.Atom.t
val xv_assertions : (Ident.tvar * Assertion.t) list
val xv_assertion : Ident.tvar * Assertion.t
val menhir_end_marker : int
