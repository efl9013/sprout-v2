type token =
    WHILE
  | VOID
  | UNSIGNED
  | STRING of string
  | SHARPINCLUDE
  | SHARPDEFINE
  | SEMI
  | RPAREN
  | RETURN
  | RBLOCK
  | PREDSYM of Ast.LogicOld.pred_sym
  | PLUSPLUS
  | PHI
  | OR
  | NOT
  | NONDET
  | MOD
  | MINUSMINUS
  | MINUS
  | MAIN
  | LPAREN
  | LNONDET
  | LBLOCK
  | INTL of int
  | INT
  | INIT
  | IF
  | ID of string
  | EQUAL
  | EOF
  | ELSE
  | DOCHECK
  | DIV
  | CORON
  | COR
  | COMMA
  | CIMP
  | CEG
  | CEF
  | CAP
  | CAND
  | CAG
  | CAF
  | BREAK
  | BODY
  | ASTERISK
  | ASSUME
  | AND
  | ADD
val stmt_of_statements : CSyntax.Statement.t list -> CSyntax.Statement.t
val mk_fun_nondet :
  string -> (string * Ast.LogicOld.Sort.t) list -> CSyntax.FunDecl.t
val menhir_begin_marker : int
val xv_toplevel :
  CSyntax.cctl * CSyntax.Define.t list * CSyntax.FunDecl.t list
val xv_Variables : string list
val xv_Variable : string list
val xv_VarDecl : CSyntax.Declare.t list
val xv_Type : Ast.LogicOld.Sort.t
val xv_Term : Ast.LogicOld.Term.t
val xv_T_intNeg : Ast.LogicOld.Term.t
val xv_T_intMultDivMod : Ast.LogicOld.Term.t
val xv_T_intAtom : Ast.LogicOld.Term.t
val xv_T_intAddSub : Ast.LogicOld.Term.t
val xv_T_int : Ast.LogicOld.Term.t
val xv_T_bool : Ast.LogicOld.Atom.t
val xv_Statements : CSyntax.Statement.t list
val xv_StatementIfT : CSyntax.Statement.t
val xv_StatementGeneral : CSyntax.Statement.t
val xv_Statement : CSyntax.Statement.t
val xv_Phi : CSyntax.Ctl.t
val xv_ParametersOneOrMore : (string * Ast.LogicOld.Sort.t) list
val xv_Parameters : (string * Ast.LogicOld.Sort.t) list
val xv_Parameter : string * Ast.LogicOld.Sort.t
val xv_MultipleNondetAssignInit : unit
val xv_MultipleAssignInit : string list * Ast.LogicOld.Term.t
val xv_Init : CSyntax.Init.t list
val xv_FormulaOr : Ast.LogicOld.Formula.t
val xv_FormulaNeg : Ast.LogicOld.Formula.t
val xv_FormulaAtom : Ast.LogicOld.Formula.t
val xv_FormulaAnd : Ast.LogicOld.Formula.t
val xv_Formula : Ast.LogicOld.Formula.t
val xv_Decls :
  CSyntax.Ctl.t option * CSyntax.Declare.t list *
  CSyntax.Init.t list option * CSyntax.Statement.t option *
  CSyntax.Define.t list * CSyntax.FunDecl.t list
val xv_Decl :
  CSyntax.Ctl.t option * CSyntax.Declare.t list *
  CSyntax.Init.t list option * CSyntax.Statement.t option *
  CSyntax.Define.t list * CSyntax.FunDecl.t list
val xv_Atom : Ast.LogicOld.Atom.t
val xv_ArguementsOneOrMore : Ast.LogicOld.Term.t list
val xv_Arguements : Ast.LogicOld.Term.t list
val menhir_end_marker : int
