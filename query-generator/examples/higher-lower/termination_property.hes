/* Functional correctness property: the game ends either because C has guessed correctly, or because C has run out of guesses */ 

/* But we need to finagle the predicate to get MuVal to accept it, so the expected result for this negated form is invalid */ 
/* Result: invalid */ 

exists  (rc: int) (rn: int) (rt: int) (rx: int).
reach_7 rc rn rt rx /\ rn != rx /\ rc != 0
s.t.

reach_0 (rc': int) (rn': int) (rt': int) (rx': int) : bool =mu 
(true /\ rn' = 0 /\ rt' = 0 /\ rx' = 0 /\ rc' = 0)
;
reach_1 (rc': int) (rn': int) (rt': int) (rx': int) : bool =mu 
false \/ 
(exists (x:int) (rc: int)(rn: int)(rt: int)(rx: int). reach_0 rc rn rt rx  /\ (((((0 <= x) /\ (rn' = x)) /\ (rt' = rt)) /\ (rx' = rx)) /\ (rc' = rc))) 
;
reach_2 (rc': int) (rn': int) (rt': int) (rx': int) : bool =mu 
false \/ 
(exists (x:int) (rc: int)(rn: int)(rt: int)(rx: int). reach_1 rc rn rt rx  /\ (((((x > 0) /\ (rn' = rn)) /\ (rt' = x)) /\ (rx = rx')) /\ (rc' = x))) 
 \/ 
(exists (x:int) (rc: int)(rn: int)(rt: int)(rx: int). reach_3 rc rn rt rx  /\ (((((((x = 3) /\ (rn > rx)) /\ (rc > 0)) /\ (rc' = rc)) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx))) 
 \/ 
(exists (x:int) (rc: int)(rn: int)(rt: int)(rx: int). reach_3 rc rn rt rx  /\ (((((((x = 2) /\ (rn < rx)) /\ (rc > 0)) /\ (rc' = rc)) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx))) 
;
reach_3 (rc': int) (rn': int) (rt': int) (rx': int) : bool =mu 
false \/ 
(exists (x:int) (rc: int)(rn: int)(rt: int)(rx: int). reach_2 rc rn rt rx  /\ (((((rx' = x) /\ (rc > 0)) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rc' = (rc - 1)))) 
;
reach_5 (rc': int) (rn': int) (rt': int) (rx': int) : bool =mu 
false \/ 
(exists (x:int) (rc: int)(rn: int)(rt: int)(rx: int). reach_3 rc rn rt rx  /\ ((((((x = 1) /\ (rx = rn)) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx)) /\ (rc' = rc))) 
;
reach_6 (rc': int) (rn': int) (rt': int) (rx': int) : bool =mu 
false \/ 
(exists (x:int) (rc: int)(rn: int)(rt: int)(rx: int). reach_3 rc rn rt rx  /\ (((((((x = 0) /\ (rn != rx)) /\ (rc = 0)) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx)) /\ (rc' = rc))) 
;
reach_7 (rc': int) (rn': int) (rt': int) (rx': int) : bool =mu 
false \/ 
(exists (x:int) (rc: int)(rn: int)(rt: int)(rx: int). reach_5 rc rn rt rx  /\ (((((x = 0) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx)) /\ (rc' = rc))) 
 \/ 
(exists (x:int) (rc: int)(rn: int)(rt: int)(rx: int). reach_6 rc rn rt rx  /\ (((((x = 1) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx)) /\ (rc' = rc))) 
;

df_0  (rc: int) (rn: int) (rt: int) (rx: int): bool =mu forall (x:int)  (rc': int) (rn': int) (rt': int) (rx': int).
true /\ (((((((0 <= x) /\ (rn' = x)) /\ (rt' = rt)) /\ (rx' = rx)) /\ (rc' = rc))) => false );
df_1  (rc: int) (rn: int) (rt: int) (rx: int): bool =mu forall (x:int)  (rc': int) (rn': int) (rt': int) (rx': int).
true /\ (((((((x > 0) /\ (rn' = rn)) /\ (rt' = x)) /\ (rx = rx')) /\ (rc' = x))) => false );
df_2  (rc: int) (rn: int) (rt: int) (rx: int): bool =mu forall (x:int)  (rc': int) (rn': int) (rt': int) (rx': int).
true /\ (((((((rx' = x) /\ (rc > 0)) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rc' = (rc - 1)))) => false );
df_3  (rc: int) (rn: int) (rt: int) (rx: int): bool =mu forall (x:int)  (rc': int) (rn': int) (rt': int) (rx': int).
true /\ (((((((((x = 3) /\ (rn > rx)) /\ (rc > 0)) /\ (rc' = rc)) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx))) => false ) /\ (((((((((x = 2) /\ (rn < rx)) /\ (rc > 0)) /\ (rc' = rc)) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx))) => false ) /\ ((((((((x = 1) /\ (rx = rn)) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx)) /\ (rc' = rc))) => false ) /\ (((((((((x = 0) /\ (rn != rx)) /\ (rc = 0)) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx)) /\ (rc' = rc))) => false );
df_5  (rc: int) (rn: int) (rt: int) (rx: int): bool =mu forall (x:int)  (rc': int) (rn': int) (rt': int) (rx': int).
true /\ (((((((x = 0) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx)) /\ (rc' = rc))) => false );
df_6  (rc: int) (rn: int) (rt: int) (rx: int): bool =mu forall (x:int)  (rc': int) (rn': int) (rt': int) (rx': int).
true /\ (((((((x = 1) /\ (rn' = rn)) /\ (rt' = rt)) /\ (rx' = rx)) /\ (rc' = rc))) => false );
df_7  (rc: int) (rn: int) (rt: int) (rx: int): bool =mu forall (x:int)  (rc': int) (rn': int) (rt': int) (rx': int).
true;
